# Default values for ai-virtual-assistant.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: quay.io/ecosystem-appeng/ai-virtual-assistant
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.1.0"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: 
    serviceaccounts.openshift.io/oauth-redirectreference.ai-virtual-assistant: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"ai-virtual-assistant-authenticated"}}'
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "ai-virtual-assistant-proxy-sa"

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8000


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: secret-ai-virtual-assistant-tls
    secret:
      defaultMode: 420
      secretName: ai-virtual-assistant-tls
  - name: secret-ai-virtual-assistant-proxy
    secret:
      defaultMode: 420
      secretName: ai-virtual-assistant-proxy
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

pgSecret: pgvector

dbName: ai_virtual_assistant

llama_stack_url: http://llamastack:8321

sessionSecret: {}
 # value: "my-session-secret"

pgvector:
  secret:
    user: postgres
    password: rag_password
    dbname: rag_blueprint
    host: pgvector
    port: "5432"

minio:
  secret:
    user: minio_rag_user
    password: minio_rag_password
    host: minio
    port: "9000"
  
    # Upload sample files to the minio bucket 
  sampleFileUpload:
    enabled: true
    bucket: documents
    urls: 
    - https://raw.githubusercontent.com/rh-ai-kickstart/RAG/refs/heads/main/notebooks/Zippity_Zoo_Grand_Invention.pdf
    - https://raw.githubusercontent.com/rh-ai-kickstart/RAG/refs/heads/main/notebooks/Zippity_Zoo_and_the_Town_of_Tumble_Town.pdf
    - https://raw.githubusercontent.com/rh-ai-kickstart/RAG/refs/heads/main/notebooks/Zippity_Zoo_and_the_Town_of_Whispering_Willows.pdf


llama-stack:
  secrets:
    TAVILY_SEARCH_API_KEY: "api-key"
  mcp-servers:
    mcp-weather:
      uri: http://rag-mcp-weather:8000/sse


ingestion-pipeline:
  # options are [S3, URL]
  source: S3
  # embedding model to use for creating embeddings
  embedding_model: all-MiniLM-L6-v2
  # name of the vector db with version, pipeline will be created with pipeline_red_hat_openshift
  name: "zippity-zoo-vector-db"
  # version of the knowledgebase
  version: "1.0"

  S3:
    access_key_id: minio_rag_user
    secret_access_key: minio_rag_password
    bucket_name: documents
    endpoint_url: http://minio:9000
    region: us-east-1


